Kubernetes operators: the next level of application management
Let the machines do the work!
13 Apr 2019
Tags: containers,kubernetes,operator,management,golang

Francesco Romani
Senior Software Engineer, Red Hat
fromani {gmail,redhat}
http://github.com/{mojaves,fromanirh}

* whoami
- sweng @ Red Hat (but opinions and mistakes are my own!)
- works daily(-ish): libvirt, kvm, python, golang, kubernetes
- interested in: more golang, containers, kubernetes; lisp
- happy linux user (red hat linux, debian, ubuntu, fedora)

* Talk outline

1. life in a cluster
2. operations and operators
3. build your own operator

* Life in a cluster

.image images/Container_crane_and_MSC_Sola.jpg 420 _
.caption Containers are being loaded on the container ship MSC Sola at the container terminal of Bremerhaven in Germany by Tvabutzku1234, public domain, from Wikimedia Commons

* Expectations

How's managing applications in a kubernetes cluster?

.image images/640px-B747-cockpit.jpg _ 520
.caption Cockpit of a 747-230 seen at the Technik Museum Speyer (Germany) by Snowdog, public domain, from Wikimedia commons

* Common management tasks (1/3)

The stuff everyone takes for granted
1. provision/configuration
2. upgrade
3. uninstall

* Common management tasks (2/3)
The stuff everyone wants:
1. backup/restore (where it makes sense)
2. logging (more than `kubectl logs` - elastic search & friends)
3. autoscaling (prometheus integration)

* Common management tasks (3/3)

TL;DR: A modern robust dockerized app needs a lot of integration within the platform.

But let's focus on easy stuff first - the stuff everyone takes for granted

* Provisioning is simple!

Easy things are easy :)

  kubectl create -f manifests.yaml

* Is provisioning always simple?

When you need to integrate componets, things may get complicate soon.
A real world example: a simple validation hook

1. enroll certs
2. send CSR
3. approve CSR
4. create secret
5. deploy webhook
6. create service
7. register configuration

* Provisioning example explained

There _are_ way to automate most of steps!
And there are (much) more complex examples, also.

Indeed automating is the whole point

Wouldn't be better if the automation was _inside_ the cluster?

* Upgrading

Just pull a new image?
What if
1. we need to undo some changes to the cluster (e.g. config. format changed)
2. we need to uninstall some pieces (uninistall in disguise!)
3. we need some new piece

* uninstall (1/2)

deceptively simple?

  kubectl delete -f manifests.yaml

* uninstall (2/2)

Let's look at the webhook example again, *highlighting* *what* *needs* *cleanup*:

1. enroll certs
2. *send* *CSR*
3. approve CSR
4. *create* *secret*
5. *deploy* *webhook*
6. *create* *service*
7. *register* *configuration*

And in the right order!
well - this time is easy, just do it in reverse :)


* Distribution

How much stuff do I need to ship?
Just a manifest and an image?
*Many* manifests and an image?
*Many* manifests and *many* images?
Do I need to do extra steps in the middle?

* Solutions?

Automation to the rescue!

I can write a script/helper/ansible role/whatever!

Sure, but...
1. still requires _some_ human intervention (maybe just kickoff)
2. runs _outside_ the cluster

Works, but can we do better?

* Operations and operators

on which we see how the Operator pattern makes our life easier

* When NOT to use an operator?

* Which problems do we want to solve?

All of them :)
Actually, all the ones we talked about in the previous section.
Still quite an improvement!

* Paradigm/Definition

* Building blocks

* Operator in a nutshell

* How to use it?

1. deploy CRD
2. deploy the operator itself
3. deploy CRs as needed

* Finding/Publishing operators

* Build your own

* Two kinds of operators

* Talk wrap up (1/4)

what we seen?

1. life in a cluster
2. operations and operators
3. build your own operator

* Talk wrap up (2/4)

Life in a cluster:

Managing *complex* (multi-component, integrated in the platform) requires *complex* procedures

Automation already exists (ansible, scripts...)

Automation runs outside the cluster

* Talk wrap up (3/4)

Operator pattern to the rescue!

* Talk wrap up (4/4)

How to build your own operator

* Q? A!

Questions?

Slides & more @ https://github.com/mojaves/
