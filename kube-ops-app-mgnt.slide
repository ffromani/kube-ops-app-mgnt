Kubernetes operators: the next level of application management
Let the machines do the work!
13 Apr 2019
Tags: containers,kubernetes,operator,management,golang

Francesco Romani
Senior Software Engineer, Red Hat
fromani {gmail,redhat}
http://github.com/{mojaves,fromanirh}

* whoami
- sweng @ Red Hat (but opinions and mistakes are my own!)
- works daily(-ish): libvirt, kvm, python, golang, kubernetes
- interested in: more golang, containers, kubernetes; lisp
- happy linux user (red hat linux, debian, ubuntu, fedora)

* Talk outline

1. life in a cluster
2. operations and operators
3. build your own operator

* Life in a cluster

.image images/Container_crane_and_MSC_Sola.jpg 420 _
.caption "Containers are being loaded on the container ship MSC Sola at the container terminal of Bremerhaven in Germany" by Tvabutzku1234, public domain, from Wikimedia Commons

* Common management tasks

Let's focus on the stuff everyone takes for granted
1. provision/configuration
2. upgrade
3. uninstall

* Simple provision is simple (1/2)

  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: testapp-deployment
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: testapp
      spec:
        containers:
        - name: testapp
          image: quay.io/user/testapp
          ports:
          - containerPort: 3000

* Simple provision is simple (2/2)

  kind: Service
  apiVersion: v1
  metadata:
    name: testapp-service
  spec:
    selector:
      app: testapp
    ports:
      - protocol: TCP
        port: 3000
        targetPort: 3000

* Why Simple provision is Simple?

Because the component I'm deploying
- is standalone
- has minimal interaction with the cluster
- requires no configuration
- is stateless

this is AWESOME!
Unfortunately, this is not always the case...

* Going meta: a messier provisioning case

Let's try something a bit more advanced.

I need to create a backend service

.link https://docs.openshift.com/container-platform/3.11/dev_guide/templates.html I need to make my resources parameterized

I want to validate the parameters to offer better user experience and rich error reporting.

.link https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/ Turns out, I want to write and distribute a validating admission webhook.

Demystified: a "validating admission webhook" is a web service which conforms to a kubernetes API (JSON input/output)

* A messier provisioning case, continued

Since I need to integrate with the kubernetes cluster, my component is no longer
- standalone
- minimally interacting with the cluster

.image images/640px-Avalanche_danger_sign.jpg
.caption "Avalanche danger sign" by Nicolas Cool @shotz, CC0, from Wikimedia Commons

* A messier provisioning case, continued

A Validating admission webhook installation steps.

1. Create TLS certificates
- use openssl?
- any other tools (cloudflare/cfssl?)
- wrapper script to set the right parameters
- *where* are my certificates being stored?

2. Pack the certificates in a "Certificate Signing Request", send it to the cluster

3. Approve the "Certificate Signing Request"

* A messier provisioning case, continued

4. Fetch certificates from the *approved* request

5. Pack the certificates in a Kubernetes Secret object

* A messier provisioning case, continued

6. Rollout Kubernetes Deployment for my app

7. Create Kubernetes Service for my app

* A messier provisioning case, continued

8. Fetch the cluster CA bundle

9. Register the endpoint in the Kubernetes APIserver

* Takeaway

.image images/TrafficJamFrustration.jpg
.caption "Frustrated by traffic congestion" by Raysonho, CC0, from Wikimedia Commons

* Upgrading

Just pull a new image?
What if
1. we need to undo some changes to the cluster (e.g. config. format changed)
2. we need to uninstall some components (uninistall in disguise!)
3. we need some new artifact
4. ...

You know where this is heading, don't you? :)

* uninstall is simple!

deceptively simple?

  kubectl delete -f manifests.yaml

* Is uninstall always simple?

1. De-register the endpoint in the Kubernetes APIserver
2. Delete the Kubernetes Secret object
3. Delete the Kubernetes Service for my app
4. Delete the Kubernetes Deployment for my app
5. Delete the Kubernetes Certificate Signing Request for my app

So...

.image images/TrafficJamFrustration.jpg _ 400
.caption "Frustrated by traffic congestion" by Raysonho, CC0, from Wikimedia Commons
* Distribution

How much stuff do I need to ship?

1. helper scripts
2. manifests
3. container image
4. *instructions*/*documentation*

* Solutions?

Automation to the rescue!
I can write a script/helper/ansible role/whatever!

Indeed automating is the whole point!
You need to version it btw
Still needs to connect to the cluster _from_ _outside_ (CLI tool? daemon?)

Wouldn't be better if the automation was _inside_ the cluster?

* Operations and operators

.image images/640px-An_emergency_dispatch_center_in_Finland.jpg
.caption "Emergency dispatch center (emergency response center) in Kerava, Finland" by Pollo, GNU FDL 2.1+, from Wikimedia Commons

* Which problems do we want to solve?

1. Manage a kubernetes application like humans would do, but automatically
2. Embed the domain-specific knowledge in a software unit
3. Make the solution easy to deploy and the consume
4. Focus on the high level items
5. Use kubernetes tools to solve a kubernetes issue :)

* Kubernetes applications?

Wait, what's a "kubernetes application"?

  A Kubernetes application is an application that is both deployed on Kubernetes
  and managed using the Kubernetes APIs and kubectl tooling.

.link https://developers.redhat.com/blog/2018/12/18/kubernetes-operators-in-depth/?intcmp=701f2000000tjyaAAA source (among many others)

* #define operator

.link https://developers.redhat.com/blog/2018/12/18/kubernetes-operators-in-depth?intcmp=701f2000000tjyaAAA From "Kubernetes Operators in Depth":

   An operator is a way of building an application and driving an application on top of Kubernetes,
   behind Kubernetes APIs. The idea is that when you have an application, [...] any complex
   application needs a lot of domain-specific knowledge [...]
   Humans should not be involved in this kind of operation because it kind of breaks the promise that
   containers gave us. Containers’ promise was ‘Hey, you package it once, it runs everywhere.

.link https://operatorhub.io/what-is-an-operator "What is an Operator?"

  The goal of an Operator is to put operational knowledge into software.
  Previously this knowledge only resided in the minds of administrators,
  various combinations of shell scripts or automation software like Ansible.
  It was outside of your Kubernetes cluster and hard to integrate.

* Operator definition, distilled

TL;DR: consolidate domain knowledge in software running _inside_ a Kubernetes cluster.

.image images/Inception-wordmark.svg.png _ 800
.caption "The wordmark on the cover of the movie Inception" by Know-World, public domain, from Wikimedia Commons

* Building blocks of an Operator

.image images/19th_century_knowledge_mechanisms_homemade_concrete_block_mold_parts.jpg
.caption "19th century knowledge mechanisms homemade concrete block mold parts" by Henry Colin Campbell, Public Domain, from Wikimedia Commons

Let's review what we will use to build our Operator(s)

* Building blocks: CRDs (Custom Resource Definition)

.link https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/ Definition:

  A resource is an endpoint in the Kubernetes API that stores a collection of API objects
  of a certain kind.
  For example, the built-in pods resource contains a collection of Pod objects.

  A custom resource is an extension of the Kubernetes API that is not necessarily available
  in a default Kubernetes installation.
  It represents a customization of a particular Kubernetes installation.
  However, many core Kubernetes functions are now built using custom resources, making
  Kubernetes more modular.

* CRD Demiystified

CRD : Kubernetes = Class : Object Oriented Programming Language

Use CRDs to add user-defined objects, using the familiar YAML syntax,
that fit and feel native in the Kubernetes infra

You can thus reuse *all* the Kubernetes tooling to manage your resource

This includes 3rd party tools - a CRD behaves like a native resource

* Building blocks: controllers

.link https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/ Definition:

  In Kubernetes, a controller is a control loop that watches the shared state of the cluster
  through the apiserver and makes changes attempting to move the current state towards the
  desired state.
  Examples of controllers that ship with Kubernetes today are the replication controller,
  endpoints controller, namespace controller, and serviceaccounts controller.

TL;DR: a control loop

* Building blocks: a control loop?

  for {
    desired := getDesiredState()
    current := getCurrentState()
    makeChanges(desired, current)
  }

The main duty is to react to changes in the cluster _actual_ state and do whatever
is possible to update it so that it matches the _desired_ state.

Simple(st?) example: ReplicaSet Controller in any Deployment.

* Operator VS controller

Every operator is-a controller
But not all controllers are operator

Operator = CRD(s) + Controller + focus

.link https://github.com/kubeflow/tf-operator/issues/300 Github discussion with lot of good insights

* Operator = CRD(s) + Controller + focus

.image images/479px-Columbus_Breaking_the_Egg_MET_DP825004.jpg _ 500
.caption Columbus Breaking the Egg, CC0, From Wikimedia Commons

* Typical operator deployment flow (1/2)

First: deploy CR(D)s

  kubectl create -f my_crd.yaml

From now on the user can reason in term of the high level objects.
  
  kubectl create -f my_cr1.yaml
  kubectl create -f my_cr2.yaml

Is that simple because the *scope* of the resources is well defined.
Is that simple *when* the scope of the resources is well defined.
Remember: *focus*

* Typical operator deployment flow (2/2)

Next: deploy the operator

Is a regular yaml manifest.
Is *ONE* regular yaml manifest
Again, the *scope* is well defined - no complexity explosion!

The simplest entry point possible, regardless the complexity of the app we want to manage
All the complexity is now *inside* the operator

Abstraction FTW!

* Higher level dividends

.link https://github.com/coreos/prometheus-operator Let's pick Prometheus monitoring as example
Because Prometheus is awesome, and we want to use it!

  ---
  apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    name: my-monitor
  spec:
    selector:
      matchLabels:
        my-monitor: "my-app"
    endpoints:
    - port: metrics
      scheme: http

* Prometheus configuration

.image images/configuration_prometheus_tiles-0.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-1.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-2.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-3.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-4.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-5.png

* Prometheus configuration

.image images/configuration_prometheus_tiles-6.png

.link https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config Yep, that's a quote from the official documentation

Abstraction FTW!

* OK, let's experiment

.image images/450px-Faraday_cage_running_at_110000_V.jpg _ 360
.caption "The Faraday Cage is in the High voltage Lab of the University of canterbury Engineerig School", by David Jackson, public domain, from Wikimedia Commons

* Finding/Publishing operators

.link https://operatorhub.io/ OperatorHUB.io

  OperatorHub.io is a new home for the Kubernetes community to share Operators

.link https://github.com/operator-framework/awesome-operators Curated list of operators

* Build your own

.link https://github.com/operator-framework/operator-sdk There is a handy SDK

Benefits of the SDK:

1. High level APIs and abstractions to write the operational logic more intuitively
2. Tools for scaffolding and code generation to bootstrap a new project fast
3. Extensions to cover common operator use cases

* kinds of operators

Options, sorted by decreasing possible integration

1. *GO* native operator - deepest possible integration
2. *Ansible* operator - reuse roles, cover basic needs
3. *Helm* operator - reuse helm charts, cover basic needs

* Example: ansible operator (1/4)

Scaffolding handled by the `operator-sdk` tool

.link https://github.com/operator-framework/operator-sdk#quick-start Quickstart

base image: `quay.io/water-hole/ansible-operator`

.link https://github.com/ansible/ansible-runner in turn based (currently) on ansible-runner

* Example: ansible operator (2/4)

Define the CRDs you want to manage

`operator-sdk` helps defining the resources

* Example: ansible operator (3/4)

Add the role(s) and the playbook(s)

Just copy the files in the image

CAVEAT: The operator runs with different account, so you'll likely need to fix the cluster RBAC permissions

The operator-sdk helps in that too

* Example: ansible operator (4/4)

use `watch.yaml` to wire the resource(s) to monitor and the playbook(s) to run

  - version: v1
    group: myapp.io
    kind: MyResource
    playbook: /opt/ansible/my_paybook.yaml

*Done!*

* Ready to run!

Go and run your operators!

.image images/Tring_Parkrun_Finish.png
.caption "The runners, which are running Tring Parkrun, are sprinting to finish their run after running 5 kilometers" by Tring Parkrun, CC0, from Wikimedia Commons

* Talk wrap up (1/4)

what we seen?

1. life in a cluster
2. operations and operators
3. build your own operator

* Talk wrap up (2/4)

Life in a cluster:

Managing *complex* (multi-component, integrated in the platform) requires *complex* procedures

Automation already exists (ansible, scripts...)

Automation runs outside the cluster

* Talk wrap up (3/4)

Operator pattern to the rescue!

An "operator" is a specialized, *focused* Kubernetes controller

Watches cluster resource(s) and reconcile the cluster state towards the desired state

The resource is our application!

* Talk wrap up (4/4)

How to build your own operator

Any controller can be adapted to the task

.link https://github.com/operator-framework/operator-sdk operator-sdk makes the life easier

With operator SDK, you can easily reuse your ansible roles and helm charts!

* Q? A!

Questions?

Slides & more @ https://github.com/mojaves/
